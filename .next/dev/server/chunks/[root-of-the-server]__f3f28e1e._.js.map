{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Downloads/3rdSemester-assg/todo-nextjs/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Downloads/3rdSemester-assg/todo-nextjs/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { hash } from 'bcryptjs';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { name, email, password } = body;\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { error: 'Email and password are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if user already exists\r\n    const existingUser = await prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { error: 'User with this email already exists' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Hash password\r\n    const hashedPassword = await hash(password, 12);\r\n\r\n    // Create user\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        name: name || null,\r\n        email,\r\n        password: hashedPassword,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      {\r\n        user: {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name,\r\n        },\r\n      },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAElC,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,IAAA,2IAAI,EAAC,UAAU;QAE5C,cAAc;QACd,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ,MAAM,QAAQ;gBACd;gBACA,UAAU;YACZ;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,MAAM;gBACJ,IAAI,KAAK,EAAE;gBACX,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;YACjB;QACF,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}