{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Downloads/3rdSemester-assg/todo-nextjs/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Downloads/3rdSemester-assg/todo-nextjs/src/lib/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\r\nimport Credentials from 'next-auth/providers/credentials';\r\nimport { compare } from 'bcryptjs';\r\nimport { prisma } from './prisma';\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n  providers: [\r\n    Credentials({\r\n      credentials: {\r\n        email: { label: 'Email', type: 'email' },\r\n        password: { label: 'Password', type: 'password' },\r\n      },\r\n      authorize: async (credentials) => {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: { email: credentials.email as string },\r\n        });\r\n\r\n        if (!user || !user.password) {\r\n          return null;\r\n        }\r\n\r\n        const isPasswordValid = await compare(\r\n          credentials.password as string,\r\n          user.password\r\n        );\r\n\r\n        if (!isPasswordValid) {\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          id: user.id.toString(),\r\n          email: user.email,\r\n          name: user.name,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (session.user) {\r\n        session.user.id = token.id as string;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: '/login',\r\n  },\r\n});"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAA,kKAAQ,EAAC;IAC1D,WAAW;QACT,IAAA,uKAAW,EAAC;YACV,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,WAAW,OAAO;gBAChB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBAAE,OAAO,YAAY,KAAK;oBAAW;gBAC9C;gBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,OAAO;gBACT;gBAEA,MAAM,kBAAkB,MAAM,IAAA,8IAAO,EACnC,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;oBACpB,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Downloads/3rdSemester-assg/todo-nextjs/src/app/api/todos/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { auth } from '@/lib/auth';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\n// GET single todo\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const session = await auth();\r\n\r\n    if (!session || !session.user?.id) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const todo = await prisma.todo.findFirst({\r\n      where: {\r\n        id: parseInt(params.id),\r\n        userId: parseInt(session.user.id),\r\n      },\r\n    });\r\n\r\n    if (!todo) {\r\n      return NextResponse.json({ error: 'Todo not found' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json(todo);\r\n  } catch (error) {\r\n    console.error('GET todo error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT update todo\r\nexport async function PUT(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const session = await auth();\r\n\r\n    if (!session || !session.user?.id) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { todo, completed } = body;\r\n\r\n    const existingTodo = await prisma.todo.findFirst({\r\n      where: {\r\n        id: parseInt(params.id),\r\n        userId: parseInt(session.user.id),\r\n      },\r\n    });\r\n\r\n    if (!existingTodo) {\r\n      return NextResponse.json({ error: 'Todo not found' }, { status: 404 });\r\n    }\r\n\r\n    const updatedTodo = await prisma.todo.update({\r\n      where: { id: parseInt(params.id) },\r\n      data: {\r\n        ...(todo !== undefined && { todo }),\r\n        ...(completed !== undefined && { completed }),\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(updatedTodo);\r\n  } catch (error) {\r\n    console.error('PUT todo error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE todo\r\nexport async function DELETE(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const session = await auth();\r\n\r\n    if (!session || !session.user?.id) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const existingTodo = await prisma.todo.findFirst({\r\n      where: {\r\n        id: parseInt(params.id),\r\n        userId: parseInt(session.user.id),\r\n      },\r\n    });\r\n\r\n    if (!existingTodo) {\r\n      return NextResponse.json({ error: 'Todo not found' }, { status: 404 });\r\n    }\r\n\r\n    await prisma.todo.delete({\r\n      where: { id: parseInt(params.id) },\r\n    });\r\n\r\n    return NextResponse.json({ message: 'Todo deleted successfully' });\r\n  } catch (error) {\r\n    console.error('DELETE todo error:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAGO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,UAAU,MAAM,IAAA,4HAAI;QAE1B,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE,IAAI;YACjC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,OAAO;gBACL,IAAI,SAAS,OAAO,EAAE;gBACtB,QAAQ,SAAS,QAAQ,IAAI,CAAC,EAAE;YAClC;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,UAAU,MAAM,IAAA,4HAAI;QAE1B,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE,IAAI;YACjC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG;QAE5B,MAAM,eAAe,MAAM,gIAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC/C,OAAO;gBACL,IAAI,SAAS,OAAO,EAAE;gBACtB,QAAQ,SAAS,QAAQ,IAAI,CAAC,EAAE;YAClC;QACF;QAEA,IAAI,CAAC,cAAc;YACjB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,cAAc,MAAM,gIAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3C,OAAO;gBAAE,IAAI,SAAS,OAAO,EAAE;YAAE;YACjC,MAAM;gBACJ,GAAI,SAAS,aAAa;oBAAE;gBAAK,CAAC;gBAClC,GAAI,cAAc,aAAa;oBAAE;gBAAU,CAAC;YAC9C;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe,OACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,UAAU,MAAM,IAAA,4HAAI;QAE1B,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE,IAAI;YACjC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,eAAe,MAAM,gIAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC/C,OAAO;gBACL,IAAI,SAAS,OAAO,EAAE;gBACtB,QAAQ,SAAS,QAAQ,IAAI,CAAC,EAAE;YAClC;QACF;QAEA,IAAI,CAAC,cAAc;YACjB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,gIAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,OAAO;gBAAE,IAAI,SAAS,OAAO,EAAE;YAAE;QACnC;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA4B;IAClE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}